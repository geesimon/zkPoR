import fs from 'fs/promises';
import {
    Field,
    Poseidon,
    Struct,
    Circuit
} from 'snarkyjs';

export const NumberOfTokens = 4;

const MaxToken = 10e10;

type TokenBalances = {
    ETH: number;
    MATIC: number;
    USDC: number;
    // BTC: number;    
    // USDT: number;
    // BNB: number;
    // BUSD: number;
    // XRP: number;
    // DOGE: number;
    // ADA: number;
};
type AccountBalance = {
    id: number,
    tokenBalances: TokenBalances,
}

export type AccountMap = Map<number, Account>;

export class Account extends Struct({
    id: Field,    
    ETH: Field,
    MATIC: Field,
    USDC: Field
  }) {
    static from(accountBalance: AccountBalance) {
      return new Account({ 
                            id: Field(accountBalance.id),
                            ETH: Field(accountBalance.tokenBalances.ETH),
                            MATIC:Field(accountBalance.tokenBalances.MATIC),
                            USDC:Field(accountBalance.tokenBalances.USDC),
                        });
    };
  
    hash() {
      return Poseidon.hash([this.id, 
                            this.ETH, 
                            this.MATIC, 
                            this.USDC]);
    };
};

export class TotalAccountBalances extends Struct({
    ETH: Field,
    MATIC: Field,
    USDC: Field
}){
    add(account: Account){
        this.ETH = this.ETH.add(account.ETH);
        this.MATIC = this.ETH.add(account.MATIC);
        this.USDC = this.ETH.add(account.USDC);
    };

    sub(account: Account){
        this.ETH.assertGte(account.ETH);
        this.MATIC.assertGte(account.MATIC);
        this.USDC.assertGte(account.USDC);

        this.ETH = this.ETH.sub(account.ETH);
        this.MATIC = this.ETH.sub(account.MATIC);
        this.USDC = this.ETH.sub(account.USDC);
    };

    hash() {
        return Poseidon.hash([this.ETH, 
                              this.MATIC, 
                              this.USDC]);
    };
};

export async function loadAccounts(fileName: string) {
    const savedAccounts = JSON.parse(await fs.readFile(fileName, 'utf8'));
    let balances : number[] = Array(NumberOfTokens).fill(0);

    return savedAccounts.reduce(function(map:AccountMap, account: AccountBalance) {
        map.set(account.id, Account.from(account));
        return map;
    }, new Map<number, Account>());
}

export function totalBalances(accounts: AccountMap) {
    let totalBalances = Array(NumberOfTokens).fill(0).map(Field);

    accounts.forEach(account =>{
        totalBalances.forEach((_, i) =>{
            totalBalances[i] = totalBalances[i].add(account.balances[i])
        })
    });

    return totalBalances;
}

function getRandomInt(max: number) {
    return Math.floor(Math.random() * max);
}

export function generateRandomAccounts(amount: number){
    return Array(amount).fill(0).map((_, i) => {
        return {
            id: 1000 + i,
            ETH: getRandomInt(MaxToken),
            MATIC: getRandomInt(MaxToken),
            USDC: getRandomInt(MaxToken),
        }
    });
}

export async function generateRandomAccountsFile(fileName: string) {
    const accounts = generateRandomAccounts(100);

    await fs.writeFile(fileName, JSON.stringify(accounts));
}